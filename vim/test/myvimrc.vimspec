" vim: ft=vimspec:
Describe vimrc test
  Before all
    so ~/.vimrc
    " set messagesopt=wait:100,history:500
    " redir! > $MYDOTFILES/vim/test_result.log
  End

  Before
    " redir >> $MYDOTFILES/vim/test_result.log
    %bwipeout!
  End

  After all
    cal feedkeys("\<CR>")
    " redir END
  End

  After
    " redir END
  End

  " It is a test for neosnippet enabled (completion)
  "   let prevbuf = bufnr("%")
  "   set termwinsize=24x80
  "   terminal
  "   let termbuf = bufnr("%")

  "   cal term_sendkeys(termbuf, "export TERM=xterm-256\<CR>")
  "   cal term_sendkeys(termbuf, "cd " . $MYDOTFILES . "\<CR>")
  "   cal term_sendkeys(termbuf, "$MYDOTFILES/build/vim/bin/vim\<CR>")
  "   redraw!
  "   sleep 3
  "   redraw!
  "   cal term_sendkeys(termbuf, "Aonly_for_test_snipp")
  "   redraw!
  "   sleep 200m
  "   redraw!
  "   cal term_sendkeys(termbuf, "e")
  "   redraw!
  "   sleep 200m
  "   redraw!
  "   cal term_sendkeys(termbuf, "t")
  "   redraw!
  "   sleep 4
  "   redraw!
  "   cal term_sendkeys(termbuf, "\<C-n>")
  "   redraw!
  "   sleep 1
  "   redraw!
  "   cal term_sendkeys(termbuf, "\<CR>")
  "   redraw!
  "   sleep 1
  "   redraw!
  "   cal term_sendkeys(termbuf, "\<ESC>")
  "   redraw!
  "   sleep 1
  "   redraw!

  "   let actual = getline(1, '$')[1]
  "   let expect = '  1 only_for_test_snippet_expanded⏎                                                  '
  "   Assert Equals(actual, expect)
  " End


  It is a test for FZF enabled
    let prevbuf = bufnr("%")
    set termwinsize=24x80
    terminal
    let termbuf = bufnr("%")

    cal term_sendkeys(termbuf, "cd " . $MYDOTFILES . "\<CR>")
    cal term_sendkeys(termbuf, "command vim\<CR>")
    cal term_sendkeys(termbuf, "\<CR>")
    sleep 1
    cal term_sendkeys(termbuf, "\<Space>\<Space>")
    sleep 100m
    cal term_sendkeys(termbuf, "fuzzytesttxt")
    sleep 400m
    cal term_sendkeys(termbuf, "\<CR>")
    sleep 500m

    redraw!

    let actual = getline(1, '$')[1]
    let expect = '  1 This is fuzzyfinder test!⏎                                                  '
  
    Assert Equals(actual, expect)
  End

  It is a test for CtrlP enabled
    execute "normal \<C-p>fuzzytesttxt\<CR>"

    let actual = getline(1, '$')
    let expect = ['This is fuzzyfinder test!']
    Assert Equals(actual, expect)
  End

  It is a test for UltiSnips enabled
    cal setline(1, "#!/bin/bash")
    set ft=sh

    execute "normal GA\<Enter>whileread\<TAB>\<Esc>"

    let actual = getline(1, '$')
    let expect = [
          \    '#!/bin/bash',
          \    'while read line > /dev/null',
          \    'do',
          \    '    echo $line',
          \    '    ',
          \    'done < <(echo "a"; echo "b")'
          \]
    Assert Equals(actual, expect)
  End

  It is a test for neosnippet enabled
    cal setline(1, "#!/bin/bash")
    set ft=sh

    execute "normal GA\<Enter>only_for_test_snippet\<TAB>\<ESC>"

    let actual = getline(1, '$')
    let expect = [
          \    '#!/bin/bash',
          \    'only_for_test_snippet_expanded',
          \]
    Assert Equals(actual, expect)
  End

End

